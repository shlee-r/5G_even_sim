// #include <iostream>
// #include <queue>
// //#include <deque>
// #include <random>
// #include <time.h>

// using namespace std;

// #define length 3
// #define avg_pkt_length 8000

// class bit {
// 	private:
// 		int bit_id;
// 		int gen_time;
// 		int pkt_id;
// 		bool end;
// 	public:
// 		bit(int id, int timeslot, int pkt_num, bool e) {
// 			bit_id = id;
// 			gen_time = timeslot;
// 			pkt_id = pkt_num;
// 			end = e;
// 		}
// 		bit(bit* bt) {
// 			bit_id = bt->getBitId();
// 			gen_time = bt->getTime();
// 			pkt_id = bt->getPktId();
// 			end = bt->end;
// 		}
// 		int getBitId() {
// 			return bit_id;
// 		}
// 		int getTime() {
// 			return gen_time;
// 		}
// 		int getPktId() {
// 			return pkt_id;
// 		}
// 		bool isEnd() {
// 			return end;
// 		}
// };

// class node {
// 	private:
// 		int id;
// 		node* next;
// //		deque<bit*> q;
// 		queue<bit*> q;
// 	public:
// 		node() {}
// 		node(int num) {
// 			id = num;
// 			next = NULL;
// 		}
// 		void setNext(node* n) { next = n; }
// 		void GenPacket(int timeslot, int pkt_num, int pkt_length) {
// 			bool end = false;
// 			for(int i=0; i<pkt_length; i++) {
// 				if(i == pkt_length - 1)
// 					end = true;
// 				bit* tp = new bit(i, timeslot, pkt_num, end);
// //				q.push_back(tp);
// 				q.push(tp);
// 			}
// 		}
// 		bool isEmpty() {
// 			return q.empty();	//return true if the queue is empty
// 		}
// 		bit* getFirst() {
// 			return q.front();
// 		}
// 		bit* getLast() {
// 			return q.back();
// 		}
// 		int getLength() {
// 			return q.size();
// 		}
// 		void popBit() {
// //			q.pop_front();
// 			bit* tp = q.front();
// 			q.pop();
// 			delete tp;
// 		}
// 		void addBit(bit* tb) {
// //			q.push_back(tb);
// 			q.push(tb);
// 		}
// /*		bool isThereEnd() {
// 			deque<bit*>::iterator it = q.begin();
// 			while(it != q.end()) {
// 				if((*it)->isEnd())
// 					return true;
// 				it++;
// 			}
// 			return false;
// 		}*/
// 		~node() {
// 			delete next;
// 		}
// };

// void transmit(node* transmitter, node* receiver) {
// 	if(!transmitter->isEmpty()) {
// 		bit* tb = new bit(transmitter->getFirst());
// 		transmitter->popBit();
// 		receiver->addBit(tb);
// 	}
// }

// int main(int argc, char* argv[]) {
// 	//Linear Topology
// 	node* NodeContainer[length];
// 	for(int i=0; i<length; i++) {
// 		node* tn = new node(i);
// 		NodeContainer[i] = tn;
// 	}
// 	for(int i=0; i<length-1; i++) {
// 		NodeContainer[i]->setNext(NodeContainer[i+1]);
// 	}

// 	default_random_engine generator;
// 	exponential_distribution<double> distribution(1.0/avg_pkt_length);
// 	srand(time(NULL));
// 	int timeslot = 0;
// 	int max_timeslot = atoi(argv[1]);
// 	int pkt_num = 0;
// 	double arrival_rate = atof(argv[2]);
// 	bool tc[length-1];
// 	int en[length-1];
// 	bool tr[length-1];
// 	for(int i=0; i<length; i++) {
// 		tc[i] = false;
// 		en[i] = 0;
// 		tr[i] = false;
// 	}
// 	while(timeslot < max_timeslot) {
// //		cout << "Timeslot " << timeslot << " : \n";
// 		long ran_num = (rand() % 10000) * 10000 + (rand() % 10000);
// 		if(ran_num < arrival_rate * 100.0 / avg_pkt_length * 1000000.0) {
// 			double temp = distribution(generator);
// 			int pkt_length = int(temp);
// 			while(pkt_length < 80) {	// minimal packet length
// 				temp = distribution(generator);
// 				pkt_length = int(temp);
// 			}
// 			NodeContainer[0]->GenPacket(timeslot, pkt_num, pkt_length);
// 			pkt_num++;
// 			en[0]++;
// //			cout << "	Packet " << pkt_num-1 << " generated (" << pkt_length << ")\n";
// 		}
// 		for(int i=0; i<length-1; i++) {
// 			if(!tc[i] && !(NodeContainer[i]->isEmpty())) {
// 				if(en[i]>=1)
// 					tc[i] = true;
// 			}
// 		}
// 		for(int i=0; i<length-1; i++) {
// 			if(tr[i]) {
// 				transmit(NodeContainer[i], NodeContainer[i+1]);
// 				tr[i] = false;
// 				if(NodeContainer[i+1]->getLast()->isEnd()) {
// 					tc[i] = false;
// 					en[i]--;
// 					if(i+1 < length-1)
// 						en[i+1]++;
// 				}
// 			}
// 			else if(tc[i]) {
// 				tr[i] = true;
// 			}
// 		}
// 		if(!(NodeContainer[length-1]->isEmpty())) {
// 			bit* pb = NodeContainer[length-1]->getFirst();
// 			if(pb->isEnd()) {
// //				cout << "Packet " << pb->getPktId() << " : " << timeslot - pb->getTime() << endl;
// //				cout << "	Pkt " << pb->getPktId() << " Transmitted : " << timeslot - pb->getTime() << endl;
// 				cout << timeslot - pb->getTime() << endl;
// 				tc[length-1] = false;
// 			}
// 			NodeContainer[length-1]->popBit();
// //			cout << "		Popped\n";
// 		}
// //		cout << "	[ " << NodeContainer[0]->getLength() << " , " << NodeContainer[1]->getLength() << " , " << NodeContainer[2]->getLength() << " ]\n";
// //		cout << "	[ " << tc[0] << " , " << tc[1] << " , " << tc[2] << " ]\n";
// //		cout << "	length " << NodeContainer[length-1]->getLength() << endl; 
// 		timeslot++;
// 	}
// }
